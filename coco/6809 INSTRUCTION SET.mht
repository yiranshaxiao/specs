<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>6809 INSTRUCTION SET</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.2800.1170" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#ffffff>
<H1><FONT color=3D#0000ff>6809 INSTRUCTION SET</FONT></H1>
<P>The instruction set of the MC6809E is similar to that of the MC6800 =
and is=20
upward compatible at the source code level. The number of opcodes has =
been=20
reduced from 72 to 59, but because of the expanded architecture and =
additional=20
addressing modes, the number of available opcodes (with different =
addressing=20
modes) has risen from 197 to 1464.<BR>Some of the new instructions are =
described=20
in detail below.</P>
<H2><A name=3DPSHU/PSHS><FONT color=3D#0000ff>PSHU/PSHS</FONT></A></H2>
<P>The push instructions have the capability of pushing onto either the =
hardware=20
stack (S) or user stack (U) any single register or set of registers with =
a=20
single instruction.</P>
<H2><A name=3DPULU/PULS><FONT color=3D#0000ff>PULU/PULS</FONT></A></H2>
<P>The pull instructions have the same capability of the push =
instruction, in=20
reverse order. The byte immediately following the push or pull opcode =
determines=20
which register or registers are to be pushed or pulled. The actual =
push/pull=20
sequence is fixed; each bit defines a unique register to push or pull, =
as shown=20
below.</P>
<TABLE cellSpacing=3D0 cellPadding=3D0 width=3D"100%" border=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dmiddle>
      <H2><A name=3D"Push/Pull Post Byte"><FONT =
color=3D#0000ff>Push/Pull Post=20
      Byte</FONT></A></H2>
      <TABLE borderColor=3D#ffffff borderColorDark=3D#ffffff =
cellPadding=3D3=20
      borderColorLight=3D#ffffff border=3D1>
        <TBODY>
        <TR>
          <TD>7</TD>
          <TD>6</TD>
          <TD>5</TD>
          <TD>4</TD>
          <TD>3</TD>
          <TD>2</TD>
          <TD>1</TD>
          <TD>0</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>CCR</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>A</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>B</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>DPR</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>X</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>Y</TD></TR>
        <TR>
          <TD>|</TD>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>S/U</TD></TR>
        <TR>
          <TD>+</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>-</TD>
          <TD>PC</TD></TR></TBODY></TABLE></TD>
    <TD align=3Dmiddle>
      <H2><A name=3D"Push/Pull Order"><FONT color=3D#0000ff>Push/Pull=20
      Order</FONT></A></H2>
      <DIV align=3Dcenter>
      <CENTER>
      <TABLE borderColor=3D#ffffff cellPadding=3D2 border=3D1>
        <TBODY>
        <TR>
          <TD align=3Dmiddle><FONT color=3D#0000ff><STRONG>Pull=20
            Order</STRONG></FONT></TD>
          <TD borderColor=3D#000000 align=3Dmiddle=20
            bgColor=3D#00ff00><STRONG>CC</STRONG></TD>
          <TD align=3Dmiddle>Increasing </TD></TR>
        <TR>
          <TD align=3Dmiddle>|</TD>
          <TD borderColor=3D#000000 align=3Dmiddle=20
            bgColor=3D#00ff00><STRONG>A</STRONG></TD>
          <TD align=3Dmiddle>memory</TD></TR>
        <TR>
          <TD align=3Dmiddle>v</TD>
          <TD borderColor=3D#000000 align=3Dmiddle=20
            bgColor=3D#00ff00><STRONG>B</STRONG></TD>
          <TD align=3Dmiddle>|</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle=20
            bgColor=3D#00ff00><STRONG>DP</STRONG></TD>
          <TD align=3Dmiddle>v</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>X=20
            Hi</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>X=20
            Lo</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>Y=20
            Hi</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>Y=20
            Lo</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD>&nbsp;</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>U/S=20
            Hi</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD align=3Dmiddle>^</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>U/S=20
            Lo</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD align=3Dmiddle>|</TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>PC=20
            Hi</STRONG></TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD align=3Dmiddle><FONT color=3D#0000ff><STRONG>Push=20
            Order</STRONG></FONT></TD>
          <TD borderColor=3D#000000 align=3Dmiddle =
bgColor=3D#00ff00><STRONG>PC=20
            Lo</STRONG></TD>
          =
<TD>&nbsp;</TD></TR></TBODY></TABLE></CENTER></DIV></TD></TR></TBODY></TA=
BLE>
<H2><A name=3DTFR/EXG><FONT color=3D#0000ff>TFR/EXG</FONT></A></H2>
<P>Within the MC6809E, any register may be transferred to or exchanged =
with=20
another of like size; i.e. 8-bit to 8-bit or 16-bit to 16-bit. <BR>Bits =
4-7 of=20
postbyte define the source register, while bits 0-3 represent the =
destination=20
register. These are denoted as follows:</P>
<TABLE cellSpacing=3D0 cellPadding=3D0 width=3D"100%" border=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dmiddle rowSpan=3D3>
      <H2><A name=3D"Transfer/Exchange Post Byte"><FONT=20
      color=3D#0000ff>Transfer/Exchange Post Byte</FONT></A></H2>
      <DIV align=3Dcenter>
      <CENTER>
      <TABLE borderColor=3D#ffffff borderColorDark=3D#ffffff =
cellPadding=3D3=20
      borderColorLight=3D#ffffff border=3D1>
        <TBODY>
        <TR>
          <TD><FONT face=3DCourier>7</FONT></TD>
          <TD><FONT face=3DCourier>6</FONT></TD>
          <TD><FONT face=3DCourier>5</FONT></TD>
          <TD><FONT face=3DCourier>4</FONT></TD>
          <TD><FONT face=3DCourier>3</FONT></TD>
          <TD><FONT face=3DCourier>2</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD></TR>
        <TR>
          <TD borderColor=3D#000000 align=3Dmiddle bgColor=3D#00ff00=20
            colSpan=3D4><STRONG>Srce</STRONG></TD>
          <TD borderColor=3D#000000 align=3Dmiddle bgColor=3D#00ff00=20
            =
colSpan=3D4><STRONG>Dest</STRONG></TD></TR></TBODY></TABLE></CENTER></DIV=
></TD>
    <TD vAlign=3Dtop align=3Dmiddle colSpan=3D2>
      <H2><FONT color=3D#0000ff>Register Field</FONT></H2></TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dmiddle>
      <DIV align=3Dcenter>
      <CENTER>
      <TABLE borderColor=3D#ffffff borderColorDark=3D#ffffff =
cellPadding=3D3=20
      borderColorLight=3D#ffffff border=3D1>
        <TBODY>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>D (A,B)</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>X</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>Y</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>U</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>S</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            =
face=3DCourier><STRONG>PC</STRONG></FONT></TD></TR></TBODY></TABLE></CENT=
ER></DIV></TD>
    <TD vAlign=3Dtop align=3Dmiddle>
      <DIV align=3Dcenter>
      <CENTER>
      <TABLE borderColor=3D#ffffff borderColorDark=3D#ffffff =
cellPadding=3D3=20
      borderColorLight=3D#ffffff border=3D1>
        <TBODY>
        <TR>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>A</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>B</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            face=3DCourier><STRONG>CCR</STRONG></FONT></TD></TR>
        <TR>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>0</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD><FONT face=3DCourier>1</FONT></TD>
          <TD borderColor=3D#000000 bgColor=3D#00ff00 colSpan=3D4><FONT=20
            =
face=3DCourier><STRONG>DPR</STRONG></FONT></TD></TR></TBODY></TABLE></CEN=
TER></DIV></TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dmiddle colSpan=3D2><FONT=20
      color=3D#0000ff><STRONG>NOTE:<BR></STRONG></FONT>All other =
combinations are=20
      undefined and INVALID</TD></TR></TBODY></TABLE>
<H2><A name=3DLEAX/LEAY/LEAU/LEAS><FONT=20
color=3D#0000ff>LEAX/LEAY/LEAU/LEAS</FONT></A></H2>
<P>The LEA (Load Effective Address) works by calculating the effective =
address=20
used in an indexed instruction and stores that address value, rather =
than the=20
data at that address, in a pointer register. This makes all the features =
of the=20
internal addressing hardware available to the programmer. Some of the=20
implications of this instruction are illustrated in Table 3</P>
<P>The LEA instruction also allows the user to access data and tables in =
a=20
position independent manner. For example:</P>
<BLOCKQUOTE><PRE>LEAX MSG1, PCR
LBSR PDATA			(Print message routine)
MSG1 FCC 'MESSAGE'</PRE></BLOCKQUOTE>
<P>This sample program prints 'MESSAGE'. By writing <FONT=20
face=3D"Courier New">MSG1, PCR</FONT>, the assembler computes the =
distance between=20
the present address and <FONT face=3D"Courier New">MSG1</FONT>. This =
result is=20
placed as a constant into the <FONT face=3D"Courier New">LEAX</FONT> =
instruction=20
which will be indexed from the PC value at the time of execution. No =
matter=20
where the code is located when it is executed, the computed offset from =
the PC=20
will put the absolute address of <FONT face=3D"Courier New">MSG1</FONT> =
into the X=20
pointer register. This code is totally position-independent.</P>
<P>The LEA instructions are very powerful and use an internal holding =
register=20
(temp). Care must be exercised when using the LEA instructions with the =
auto=20
increment and auto decrement addressing modes due to the sequence of =
internal=20
operations. The LEA internal sequence is outlined as follows: </P>
<BLOCKQUOTE><PRE>LEAa,b+ (any of the 18 bit pointer registers X, Y, U, =
or S may be substituted for a and b.)</PRE><PRE>1. b    =3D&gt; temp		=
(calculate the EA)
2. b+1  =3D&gt; b 		(modify b, postincrement)
3. temp =3D&gt; a		(load a)</PRE><PRE>LEAa, - b</PRE><PRE>1. b-1  =
=3D&gt; temp		(calculate EA with predecrement)
2. b-1  =3D&gt; b		(modify b, predecrement)
3. temp =3D&gt; a		(load a)</PRE></BLOCKQUOTE>
<P><A name=3D"TABLE 3 - LEA EXAMPLES"><FONT =
color=3D#0000ff><STRONG>TABLE 3 - LEA=20
EXAMPLES</STRONG></FONT></A></P>
<TABLE cellSpacing=3D0 cellPadding=3D4 border=3D1>
  <TBODY>
  <TR>
    <TD><STRONG>Instruction</STRONG></TD>
    <TD><STRONG>Operation</STRONG></TD>
    <TD><STRONG>Comment</STRONG></TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAX 10,X</FONT></TD>
    <TD><FONT face=3DCourier>X + 10 =3D&gt; X</FONT></TD>
    <TD>Adds 5-Bit Constant 10 to X</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAX 500,X</FONT></TD>
    <TD><FONT face=3DCourier>X + 500 =3D&gt; X</FONT></TD>
    <TD>Adds 15-Bit Constant 500 to X</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAY A,Y</FONT></TD>
    <TD><FONT face=3DCourier>Y + A =3D&gt; Y</FONT></TD>
    <TD>Adds 8-Bit A Accumulator to Y</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAY D,Y</FONT></TD>
    <TD><FONT face=3DCourier>Y + D =3D&gt; Y</FONT></TD>
    <TD>Adds 16-Bit D Accumulator to Y</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAU -10,U</FONT></TD>
    <TD><FONT face=3DCourier>U - 10 =3D&gt; U</FONT></TD>
    <TD>Subtracts 10 from U</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAS -10,S</FONT></TD>
    <TD><FONT face=3DCourier>S - 10 =3D&gt; S</FONT></TD>
    <TD>Used to Reserve Area on Stack </TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAS 10,S</FONT></TD>
    <TD><FONT face=3DCourier>S + 10 =3D&gt; S</FONT></TD>
    <TD>Used to 'Clean Up' Stack</TD></TR>
  <TR>
    <TD><FONT face=3DCourier>LEAX 5,S</FONT></TD>
    <TD><FONT face=3DCourier>S + 5 =3D&gt; S</FONT></TD>
    <TD>Transfers As Well As Adds</TD></TR></TBODY></TABLE>
<P>Auto increment-by-two and auto decrement-by-two instructions work =
similarly.=20
Note that LEAX,X+ does not change X; however LEAX, - X does decrement X. =
LEAX=20
1,X should be used to increment X by one. </P>
<H2><A name=3DMUL><FONT color=3D#0000ff>MUL</FONT></A><FONT =
color=3D#0000ff>=20
</FONT></H2>
<P>Multiplies the unsigned binary numbers in the A and B accumulator and =
places=20
the unsigned result into the 16-bit D accumulator. This unsigned =
multiply also=20
allows multiple-precision muitiplications. </P>
<H2><A name=3D"LONG AND SHORT RELATIVE BRANCHES"><FONT =
color=3D#0000ff>LONG AND=20
SHORT RELATIVE BRANCHES </FONT></A></H2>
<P>The MC6809E has the capability of program-counter relative branching=20
throughout the entire memory map. In this mode, if the branch is to be =
taken,=20
the 8- or 16-bit signed offset is added to the value of the program =
counter to=20
be used as the effective address. This allows the program to branch =
anywhere in=20
the 64K memory map. Position independent code can be easily generated =
through=20
the use of relative branching. Both short (8 bit) and long (16 bit) =
branches are=20
available </P>
<H2><A name=3DSYNC><FONT color=3D#0000ff>SYNC</FONT></A></H2>
<P>After encountering a sync instruction, the MPU enters a sync state, =
stops=20
processing instructions, and waits for an interrupt. If the pending =
interrupt is=20
non-maskable (!NMI)<FONT color=3D#ff0000> l</FONT> or maskable (!FIRQ, =
!IRQ) with=20
its mask bit (F or l) clear, the processor will cear the sync state and =
perform=20
the normal interrupt stacking and service routine. Since <FONT=20
face=3DArial>!FIRQ</FONT> and !IRQ are not edge triggered, a low level =
with a=20
minimum duration of three bus cydes is required to assure that the =
interrupt=20
will be taken. If the pending interrupt is maskable (!FIRQ, !IRQ) with =
its mask=20
bit (F or I) set, the processor will clear the sync state and continue=20
processing by executing the next in-line instruction. Figure 16 depicts =
sync=20
timing. </P>
<H2><A name=3D"SOFTWARE INTERRUPTS"><FONT color=3D#0000ff>SOFTWARE=20
INTERRUPTS</FONT></A></H2>
<P>A software interrupt is an instruction which will cause an interrupt =
and its=20
associated vector fetch. These software interrupts are useful in =
operating=20
system calls, software debugging, trace operations, memory mapping, and =
software=20
development systems. Three levels of SWI are available on the MC6809E =
and are=20
prioritized in the following order: SWI, SWI2, SWI3. </P>
<H2><A name=3D"16-BIT OPERATION"><FONT color=3D#0000ff>16-BIT OPERATION=20
</FONT></A></H2>
<P>The MC6809 has the capability of processing 16-bit data. Thee =
instructions=20
include loads. stores, compares, adds, subtracts, transfers. exchanges, =
pushes,=20
and pulls.</P>
<H2><A name=3D"CYCLE-BY-CYCLE OPERATION"><FONT =
color=3D#0000ff>CYCLE-BY-CYCLE=20
OPERATION</FONT></A><FONT color=3D#0000ff> </FONT></H2>
<P>The address-bus cycle-by-cycle performance chart (Figure 16) =
illustrates the=20
memory-access sequence corresponding to each possible instruction and =
addressing=20
mode in the MC6809E. Each instruction begins with an opcode fetch. While =
that=20
opcode is being internally decoded. the next program byte is always =
fetched.=20
Most instructions will use the next byte, so this technique considerably =
speeds=20
throughput) Next, the operation of each opcode will follow the =
flowchart. !VMA=20
is an indication of $FFFF on the address bus, R/!W =3D 1 and BS =3D 0. =
The following=20
examples illustrate the use of the chart. </P>
<P><FONT color=3D#0000ff><STRONG>Example 1: LBSR (Branch Taken) Before =
Execution=20
SP =3D F000</STRONG></FONT></P>
<TABLE cellSpacing=3D0 cellPadding=3D4 border=3D0>
  <TBODY>
  <TR>
    <TD><FONT face=3D"Courier New">$8000</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">LBSR</FONT></TD>
    <TD><FONT face=3D"Courier New">CAT</FONT></TD></TR>
  <TR>
    <TD>&nbsp;</TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">...</FONT></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD><FONT face=3D"Courier New">$A000</FONT></TD>
    <TD><FONT face=3D"Courier New">CAT</FONT></TD>
    <TD><FONT face=3D"Courier New">...</FONT></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD>&nbsp;</TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">...</FONT></TD>
    <TD>&nbsp;</TD></TR></TBODY></TABLE>
<P><FONT color=3D#0000ff><STRONG>CYCLE-BY-CYCLE FLOW</STRONG></FONT></P>
<TABLE cellSpacing=3D0 cellPadding=3D4 border=3D1>
  <TBODY>
  <TR>
    <TD><STRONG>Cycle#</STRONG></TD>
    <TD><STRONG>Address</STRONG></TD>
    <TD><STRONG>Data</STRONG></TD>
    <TD><STRONG>R/!W</STRONG></TD>
    <TD><STRONG>Description</STRONG></TD></TR>
  <TR>
    <TD>1</TD>
    <TD>8000</TD>
    <TD>17</TD>
    <TD>1</TD>
    <TD>Opcode fetch</TD></TR>
  <TR>
    <TD>2</TD>
    <TD>8001</TD>
    <TD>20</TD>
    <TD>1</TD>
    <TD>Offset high byte</TD></TR>
  <TR>
    <TD>3</TD>
    <TD>8002</TD>
    <TD>00</TD>
    <TD>1</TD>
    <TD>Offset low byte</TD></TR>
  <TR>
    <TD>4</TD>
    <TD>FFFF</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>!VMA cycle</TD></TR>
  <TR>
    <TD>5</TD>
    <TD>FFFF</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>!VMA cycle</TD></TR>
  <TR>
    <TD>6</TD>
    <TD>A000</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>Computed branch address</TD></TR>
  <TR>
    <TD>7</TD>
    <TD>FFFF</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>!VMA cycle</TD></TR>
  <TR>
    <TD>8</TD>
    <TD>EFFE</TD>
    <TD>80</TD>
    <TD>0</TD>
    <TD>Stack high order byte of return address</TD></TR>
  <TR>
    <TD>9</TD>
    <TD>EFFE</TD>
    <TD>03</TD>
    <TD>0</TD>
    <TD>Stack low order byte of return address</TD></TR></TBODY></TABLE>
<P><FONT color=3D#0000ff><STRONG>Example 2: DEC =
(Extended)</STRONG></FONT></P>
<TABLE cellSpacing=3D0 cellPadding=3D4 border=3D0>
  <TBODY>
  <TR>
    <TD><FONT face=3D"Courier New">$8000</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">DEC</FONT></TD>
    <TD><FONT face=3D"Courier New">$A000</FONT></TD></TR>
  <TR>
    <TD>&nbsp;</TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">...</FONT></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD><FONT face=3D"Courier New">$A000</FONT></TD>
    <TD><FONT face=3D"Courier New">FCB</FONT></TD>
    <TD><FONT face=3D"Courier New">$80</FONT></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD>&nbsp;</TD>
    <TD>&nbsp;</TD>
    <TD><FONT face=3D"Courier New">...</FONT></TD>
    <TD>&nbsp;</TD></TR></TBODY></TABLE>
<P><FONT color=3D#0000ff><STRONG>CYCLE-BY-CYCLE FLOW</STRONG></FONT></P>
<TABLE cellSpacing=3D0 cellPadding=3D4 border=3D1>
  <TBODY>
  <TR>
    <TD><STRONG>Cycle#</STRONG></TD>
    <TD><STRONG>Address</STRONG></TD>
    <TD><STRONG>Data</STRONG></TD>
    <TD><STRONG>R/!W</STRONG></TD>
    <TD><STRONG>Description</STRONG></TD></TR>
  <TR>
    <TD>1</TD>
    <TD>8000</TD>
    <TD>7A</TD>
    <TD>1</TD>
    <TD>Opcode fetch</TD></TR>
  <TR>
    <TD>2</TD>
    <TD>8001</TD>
    <TD>A0</TD>
    <TD>1</TD>
    <TD>Operand address, high byte</TD></TR>
  <TR>
    <TD>3</TD>
    <TD>8002</TD>
    <TD>00</TD>
    <TD>1</TD>
    <TD>Operand address, low byte</TD></TR>
  <TR>
    <TD>4</TD>
    <TD>FFFF</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>!VMA cycle</TD></TR>
  <TR>
    <TD>5</TD>
    <TD>A000</TD>
    <TD>80</TD>
    <TD>1</TD>
    <TD>Read the data</TD></TR>
  <TR>
    <TD>6</TD>
    <TD>FFFF</TD>
    <TD><A=20
      =
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809_instruction_set.=
htm#*">*</A></TD>
    <TD>1</TD>
    <TD>!VMA cycle</TD></TR>
  <TR>
    <TD>7</TD>
    <TD>EFFE</TD>
    <TD>7F</TD>
    <TD>0</TD>
    <TD>Store the decremented data</TD></TR></TBODY></TABLE>
<P><A name=3D*>*</A> The data bus has the data at that particular =
address.</P>
<H2><A name=3D"INSTRUCTION SET TABLES"><FONT color=3D#0000ff>INSTRUCTION =
SET=20
TABLES</FONT></A></H2>
<P>The instructions of the MC6809E have been broken down into five =
different=20
categories. They are as follows:</P>
<UL>
  <LI>8-bit operation (Table 4)=20
  <LI>15-bit operation (Table 5)=20
  <LI>Index register/stack pointer instructions (Table 8)=20
  <LI>Relative branches (long or short) (Table 7)=20
  <LI>Miscellaneous instructions (Table 8) </LI></UL>
<P>Hexedecimal values for the instructions are given in Table 9.</P>
<H2><A name=3D"PROGRAMMING AID"><FONT color=3D#0000ff>PROGRAMMING=20
AID</FONT></A></H2>
<P>Figure 18 contains a compilation of data that will assist you in =
programming=20
the MC6809E.</P>
<P><A=20
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809fig17a.gif"><STRO=
NG>FIGURE=20
17 - CYCLE-BY-CYCLE PERFORMANCE (Sheet 1 of 5)</STRONG></A></P>
<P><STRONG>Notes</STRONG></P>
<OL>
  <LI>Each state shows
  <TABLE borderColor=3D#ffffff cellPadding=3D3 border=3D1>
    <TBODY>
    <TR>
      <TD>Data bus</TD>
      <TD borderColor=3D#000000 bgColor=3D#00ff00><STRONG>Offset=20
    High</STRONG></TD></TR>
    <TR>
      <TD>Address bus</TD>
      <TD borderColor=3D#000000 bgColor=3D#00ff00><STRONG>NNN+ 1=20
    (2)</STRONG></TD></TR></TBODY></TABLE>
  <LI>Address NNNN is a location of opcode=20
  <LI>If opcode is a two-byte opcode subsequent addresses are in =
parentheses=20
  (-).=20
  <LI>Two-byte opcodes are highlighted. </LI></OL>
<P><A=20
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809fig17b.bmp"><STRO=
NG>FIGURE=20
17 - CYCLE-BY-CYCLE PERFORMANCE (Sheet 2 of 5)</STRONG></A><BR><A=20
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809fig17c.bmp"><STRO=
NG>FIGURE=20
17 - CYCLE-BY-CYCLE PERFORMANCE (Sheet 3 of 5)</STRONG></A><BR><A=20
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809fig17d.bmp"><STRO=
NG>FIGURE=20
17 - CYCLE-BY-CYCLE PERFORMANCE (Sheet 4 of 5)</STRONG></A><BR><A=20
href=3D"http://www.howell1964.freeserve.co.uk/parts/6809fig17e.bmp"><STRO=
NG>FIGURE=20
17 - CYCLE-BY-CYCLE PERFORMANCE (Sheet 5 of =
5)</STRONG></A></P></BODY></HTML>
